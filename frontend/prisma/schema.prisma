// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model that extends Supabase auth
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  profile       Profile?
  products      Product[]
  conversations Conversation[]

  @@map("users")
}

// User profile information
model Profile {
  id            String    @id @default(uuid())
  userId        String    @unique @map("user_id")
  businessName  String?   @map("business_name")
  businessType  String?   @map("business_type")
  contactPhone  String?   @map("contact_phone")
  contactEmail  String?   @map("contact_email")
  address       String?
  city          String?
  state         String?
  zipCode       String?   @map("zip_code")
  country       String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

// Product model for inventory management
model Product {
  id          String    @id @default(uuid())
  name        String
  description String?
  sku         String?   @unique
  price       Decimal   @default(0)
  currency    String    @default("USD")
  quantity    Int       @default(0)
  imageUrl    String?   @map("image_url")
  category    String?
  tags        String[]
  isActive    Boolean   @default(true) @map("is_active")
  userId      String    @map("user_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("products")
}

// Conversation model for social media interactions
model Conversation {
  id          String    @id @default(uuid())
  platform    String    // e.g., "facebook", "instagram", "twitter"
  externalId  String    @map("external_id") // ID from the external platform
  status      String    @default("active") // active, archived, etc.
  userId      String    @map("user_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]

  @@unique([platform, externalId])
  @@map("conversations")
}

// Message model for conversation messages
model Message {
  id             String       @id @default(uuid())
  conversationId String       @map("conversation_id")
  content        String
  sender         String       // "user", "customer", "ai"
  isRead         Boolean      @default(false) @map("is_read")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}
