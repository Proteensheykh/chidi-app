name: Backend CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      
      - name: Install Prisma CLI
        run: npm install -g prisma
      
      - name: Generate Prisma Client
        working-directory: ./backend
        run: prisma generate
      
      # - name: Run tests
      #   working-directory: ./backend
      #   env:
      #     DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
      #     DIRECT_URL: ${{ secrets.TEST_DATABASE_URL }}
      #     SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      #     SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      #     SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      #     REDIS_URL: redis://localhost:6379/0
      #     PYTEST_ASYNCIO_MODE: auto
      #   run: |
      #     pytest --cov=app --cov-report=xml -v
      
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     file: ./backend/coverage.xml
      #     fail_ci_if_error: false

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Render CLI
        run: npm install -g @render/cli
      
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          render deploy --service backend-chidi-app
      
      - name: Run Database Migrations
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
        run: |
          cd backend
          npx prisma migrate deploy
